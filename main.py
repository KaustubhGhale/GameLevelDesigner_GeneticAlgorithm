# main.py
import pygame
import sys
import settings
from game import WumpusWorld
# Import the modified GA function
from genetic_level_generator import generate_levels_over_generations

# --- Function to Run a Single Game Instance ---
def run_game_instance(level_grid, generation_num, w_count, p_count):
    """Initializes Pygame, runs the game for one level, then quits Pygame."""
    print(f"\n--- Starting Game for Generation {generation_num} ({w_count}W, {p_count}P) ---")
    pygame.init()

    screen = pygame.display.set_mode((settings.SCREEN_WIDTH, settings.SCREEN_HEIGHT))
    pygame.display.set_caption(f"Wumpus World - GA Gen {generation_num} ({w_count}W, {p_count}P Target)")
    clock = pygame.time.Clock()

    # Initialize game state with the specific grid
    game = WumpusWorld(initial_grid=level_grid)
    player_facing = "right" # Initial facing direction

    running = True
    game_over_message = None

    # --- Nested Game Loop Logic ---
    while running:
        # Event Handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                game_over_message = "Game Quit"
            elif event.type == pygame.KEYDOWN:
                dx, dy = 0, 0
                moved = False
                if event.key in [pygame.K_LEFT, pygame.K_a]:
                    dx, dy = -1, 0
                    player_facing = "left"
                    moved = True
                elif event.key in [pygame.K_RIGHT, pygame.K_d]:
                    dx, dy = 1, 0
                    player_facing = "right"
                    moved = True
                elif event.key in [pygame.K_UP, pygame.K_w]:
                    dx, dy = 0, -1
                    player_facing = "up"
                    moved = True
                elif event.key in [pygame.K_DOWN, pygame.K_s]:
                    dx, dy = 0, 1
                    player_facing = "down"
                    moved = True
                elif event.key == pygame.K_SPACE:
                    game.shoot(player_facing) # Shoot in facing direction
                    # Check status immediately after shooting (e.g., if last wumpus killed?)
                    # Note: Win condition is usually finding gold. Killing wumpus helps.
                elif event.key == pygame.K_ESCAPE:
                     running = False
                     game_over_message = "Game Escaped"

                # Process move if a direction key was pressed
                if moved:
                    x, y = game.player_pos
                    new_x, new_y = x + dx, y + dy
                    if 0 <= new_x < settings.GRID_SIZE and 0 <= new_y < settings.GRID_SIZE:
                        game.player_pos = [new_x, new_y]
                        game.reveal_tile(new_x, new_y) # Reveal the new tile player moved to                    
                        # Check status *after* moving
                        tile_content = game.grid[new_y][new_x]
                        if tile_content == settings.WUMPUS: # Landed on a live Wumpus
                             game_over_message = "Game Over! Eaten by a Wumpus!"
                             running = False
                        elif tile_content == settings.PIT:
                             game_over_message = "Game Over! Fell into a Pit!"
                             running = False
                        elif tile_content == settings.GOLD:
                             game_over_message = "You found the gold! You Win!"
                             running = False


        # Drawing
        screen.fill((0, 0, 0))
        game.draw(screen)

        # Update display
        pygame.display.flip()
        clock.tick(10) # Frame rate limit
    # --- End of Nested Game Loop ---

    print(f"Result for Generation {generation_num}: {game_over_message or 'Ended'}")
    if game_over_message and ("Win" in game_over_message or "Over" in game_over_message):
         # Display final message briefly before quitting Pygame
         try:
             font = pygame.font.Font(None, 60)
             text_color = (0, 255, 0) if "Win" in game_over_message else (255, 0, 0)
             text = font.render(game_over_message, True, text_color)
             text_rect = text.get_rect(center=(settings.SCREEN_WIDTH/2, settings.SCREEN_HEIGHT/2))
             screen.blit(text, text_rect)
             pygame.display.flip()
             pygame.time.wait(2500) # Pause
         except Exception as e:
             print(f"Error displaying final message: {e}")

    pygame.quit() # Crucial: Quit Pygame for this instance

# --- Main Execution ---
if __name__ == "__main__":
    # 1. Run the Genetic Algorithm to get level snapshots
    level_snapshots = generate_levels_over_generations()

    if not level_snapshots:
        print("No level snapshots were generated by the GA. Exiting.")
        sys.exit()

    print(f"\nPreparing to play {len(level_snapshots)} game instances...")
    input("Press Enter to start playing the generated levels...")

    # 2. Loop through the generated snapshots and play each one
    for snapshot in level_snapshots:
        # Use TARGET counts for the caption, as that's the intended difficulty stage
        caption_w = snapshot["target_num_wumpus"]
        caption_p = snapshot["target_num_pits"]
        # The grid itself will contain the 'actual' counts for the game logic
        run_game_instance(
            level_grid=snapshot["grid"],
            generation_num=snapshot["generation"],
            # Pass target counts for display/context
            w_count=caption_w,
            p_count=caption_p
        )
        # Small pause between games (optional)
        print("-" * 30)
        #input("Press Enter to play the next level...") # Uncomment for manual progression

    print("\nAll generated levels played. Exiting.")
    sys.exit()